%skeleton "lalr1.cc" /* -*- C++ -*- */
%require "3.0.2"
%defines
%define parser_class_name { Parser }

%define api.token.constructor
%define api.value.type variant
%define parse.assert
%define api.namespace { Vlab::SMT }


%code requires
{
#include <string>
#include <cstdlib>

#include "../smt/ast.h"
  namespace Vlab  {
    namespace SMT {
      class Scanner;
    }
  }
}

// The parsing context.
%parse-param { Script*& script }
%parse-param { Scanner& scanner }
%locations
%initial-action
{

};

%code
{

#include "Scanner.h"

#define yylex scanner.yylex_next_symbol

}

%define parse.trace
%define parse.error verbose

%define api.token.prefix {TOK_}

%token
  END  0               "end of file"
  PAREN_O              "("
  PAREN_C              ")"

  BANG                  "!"
  UNDERSCORE           "_"
  AS                   "as"
  EXISTS               "exists"
  FORALL               "forall"
  LET                  "let"
  PAR                  "par"
  IMPLIES              "implies"
  AND                  "and"
  OR                   "or"
  NOT                  "not"
  MINUS                "-"
  PLUS                 "+"
  STAR                 "*"
  DIV                  "div"
  EQ                   "="
  NOTEQ                "!="
  GT                   ">"
  GE                   ">="
  LT                   "<"
  LE                   "<="
  CONCAT               "concat"
  IN                   "in"
  NOTIN                "notIn"
  LEN                  "len"
  CONTAINS             "contains"
  NOTCONTAINS          "notContains"
  PREFIXOF             "prefixof"
  SUFFIXOF             "suffixof"
  BEGINS               "begins"
  NOTBEGINS            "notBegins"
  ENDS                 "ends"
  NOTENDS              "notEnds"
  INDEXOF              "indexOf"
  LASTINDEXOF          "lastIndexOf"
  CHARAT               "charAt"
  SUBSTRING            "subString"
  SUBSTRINGLENGTH      "subStringLength"
  SUBSTRINGFIRSTOF     "subStringFirstOf"
  SUBSTRINGLASTOF      "subStringLastOf"
  TOUPPER              "toUpper"
  TOLOWER              "toLower"
  TRIM                 "trim"
  TOSTRING             "toString"
  TOINT                "toInt"
  REPLACE              "replace"
  COUNT                "count"
  ITE                  "ite"
  RE_CONCAT            "re.++"
  RE_OR                "re.or"
  RE_UNION             "re.union"
  RE_INTER             "re.inter"
  RE_STAR              "re.*"
  RE_PLUS              "re.+"
  RE_OPT               "re.opt"
  RE_RANGE             "re.range"
  RE_LOOP              "re.loop"
  TO_REGEX             "str.to.re"  
  RE_ALLCHAR           "re.allchar"
  RE_ALL               "re.all"

  TBOOL                 "TBool"
  TINT                  "TInt"
  TSTRING               "TString"
  TREGEXP               "TRegExp"

  ASSERT               "assert"
  CHECK_SAT            "check-sat"
  CHECK_SAT_AND_COUNT  "check-sat-and-count"
  DECLARE_FUN          "declare-fun"
  DECLARE_VAR          "declare-variable"
  DECLARE_SORT         "declare-sort"
  DEFINE_FUN           "define-fun"
  DEFINE_SORT          "define-sort"
  EXIT                 "exit"
  GET_ASSERTIONS       "get-assertions"
  GET_ASSIGNMENT       "get-assignment"
  GET_INFO             "get-info"
  GET_MODEL            "get-model"
  GET_OPTION           "get-option"
  GET_PROOF            "get-proof"
  GET_UNSAT_CORE       "get-unsat-core"
  GET_VALUE            "get-value"
  POP                  "pop"
  PUSH                 "push"
  SET_LOGIC            "set-logic"
  SET_INFO             "set-info"
  SET_OPTION           "set-option"
;

%token <std::string>  BOOL         "bool"
%token <std::string>  BINARY       "binary"
%token <std::string>  DECIMAL      "decimal"
%token <std::string>  HEXADECIMAL  "hexadecimal"
%token <std::string>  KEYWORD      "keyword"
%token <std::string>  NUMERAL      "number"
%token <std::string>  STRING       "string"
%token <std::string>  REGEX        "regex"
%token <std::string>  SYMBOL       "symbol"

%type <CommandList_ptr> command_list
%type <Command_ptr> command

%type <Term_ptr> term
%type <TermList_ptr> term_list_
%type <Sort_ptr> sort
%type <SortList_ptr> sort_list
%type <SortList_ptr> sort_list_
%type <Attribute_ptr> attribute
%type <AttributeList_ptr> attribute_list_
%type <SortedVar_ptr> sorted_var
%type <SortedVarList_ptr> sorted_var_list
%type <SortedVarList_ptr> sorted_var_list_
%type <VarBinding_ptr> var_binding
%type <VarBindingList_ptr> var_binding_list_
%type <Term_ptr> qual_identifier
%type <Identifier_ptr> identifier
%type <NumeralList_ptr> numeral_list_

%type <Primitive_ptr> spec_constant
%type <Term_ptr> term_constant
%type <TVariable_ptr> t_variable

%printer { yyoutput << $$; } <std::string>;

%%
%start script;

/* Commands */
script                :
                        command_list                                                      { script = new Script($1); }
                      ;

command_list          : 
                        command_list command                                              { $1 -> push_back($2); $$ = $1; }
                      | /* empty */                                                       { $$ = new CommandList(); }
                      ;
                      
command               :
                        "(" "set-logic" SYMBOL ")"                                        { $$ = new SetLogic(new Primitive($3, Primitive::Type::SYMBOL)); }
                      | "(" "set-option" option ")"                                       { $$ = new Command(); }
                      | "(" "set-info" attribute ")"                                      { $$ = new Command(); }
                      | "(" "declare-sort" SYMBOL NUMERAL ")"                             { $$ = new Command(); }
                      | "(" "define-sort" SYMBOL "(" symbol_list ")" sort ")"             { $$ = new Command(); }
                      | "(" "declare-fun" SYMBOL "(" sort_list ")" sort ")"               { $$ = new DeclareFun(new Primitive($3, Primitive::Type::SYMBOL), $5, $7);}
                      | "(" "declare-fun" SYMBOL sort ")"                                 { $$ = new DeclareFun(new Primitive($3, Primitive::Type::SYMBOL), nullptr, $4);}
                      | "(" "define-fun" SYMBOL "(" sorted_var_list ")" sort term ")"     { $$ = new Command(); }                
                      | "(" "push" NUMERAL ")"                                            { $$ = new Command(); }
                      | "(" "pop" NUMERAL ")"                                             { $$ = new Command(); }
                      | "(" "assert" term ")"                                             { $$ = new Assert($3); }
                      | "(" "check-sat" ")"                                               { $$ = new CheckSat(); }
                      | "(" "check-sat" SYMBOL ")"                                        { $$ = new CheckSat(new Primitive($3, Primitive::Type::SYMBOL)); }
                      | "(" "check-sat-and-count" NUMERAL ")"                             { $$ = new CheckSatAndCount(new Primitive($3, Primitive::Type::NUMERAL)); }
                      | "(" "check-sat-and-count" NUMERAL SYMBOL ")"                      { $$ = new CheckSatAndCount(new Primitive($3, Primitive::Type::NUMERAL), new Primitive($4, Primitive::Type::SYMBOL)); }
                      | "(" "get-assertions" ")"                                          { $$ = new Command(); } 
                      | "(" "get-model" ")"                                               { $$ = new Command(); }
                      | "(" "get-proof" ")"                                               { $$ = new Command(); } 
                      | "(" "get-unsat-core" ")"                                          { $$ = new Command(); }   
                      | "(" "get-value" term_list_ ")"                                    { $$ = new Command(); }
                      | "(" "get-assignment" ")"                                          { $$ = new Command(); } 
                      | "(" "get-option" KEYWORD ")"                                      { $$ = new Command(); } 
                      | "(" "get-info" info_flag ")"                                      { $$ = new Command(); }  
                      | "(" "exit" ")"                                                    { $$ = new Command(); } 
                      ;

option                :
                        attribute           { std::cout << "attribute" << std::endl; } /* option rule is not implemented fully, see smtlib V2 specs for details */
                      ;
                      
info_flag             :
                        KEYWORD             { std::cout << $1 << std::endl; } /* info_flag rule is not implemented fully, see smtlibV2 specs for details */
                      ;

symbol_list           :
                        symbol_list_
                      | /* empty */
                      ;

symbol_list_          :
                        symbol_list_ SYMBOL
                      | SYMBOL              { std::cout << $1 << std::endl; }
                      ;


/* Logics */
/* Logic grammar rules are skipped, see smtlib V2 specs for details */

/* Theories */
/* Theory grammar rules are skipped, see smtlib V2 specs for details */

/* Terms */
term_list_            :
                        term_list_ term                                                 { $1 -> push_back($2); $$ = $1;}
                      | term                                                            { $$ = new TermList(); $$ -> push_back($1);}
                      ;

term                  :
                        "(" "!" term attribute_list_ ")"                                { $$ = new Exclamation($3, $4); }
                      | "(" "exists" "(" sorted_var_list_ ")" term ")"                  { $$ = new Exists($4, $6); }
                      | "(" "forall" "(" sorted_var_list_ ")" term ")"                  { $$ = new ForAll($4, $6); }
                      | "(" "let" "(" var_binding_list_ ")" term ")"                    { $$ = new Let($4, $6); }
                      | "(" IMPLIES term term ")"                                       { $$ = new Or(CreateTermList(2, new Not($3), $4)); }
                      | "(" AND term_list_ ")"                                          { $$ = new And($3); }
                      | "(" OR term_list_ ")"                                           { $$ = new Or($3); }  
                      | "(" NOT term ")"                                                { $$ = new Not($3); }
                      | "(" MINUS term ")"                                              { $$ = new UMinus($3); }
                      | "(" MINUS term term ")"                                         { $$ = new Minus($3, $4); }
                      | "(" PLUS term_list_ ")"                                         { $$ = new Plus($3); }
                      | "(" STAR term_list_ ")"                                         { $$ = new Times($3); }
                      | "(" DIV term_list_ ")"                                          { $$ = new Div($3);   }
                      | "(" EQ term term ")"                                            { $$ = new Eq($3, $4); }
                      | "(" NOTEQ term term ")"                                         { $$ = new NotEq($3, $4); }
                      | "(" GT term term ")"                                            { $$ = new Gt($3, $4); }
                      | "(" GE term term ")"                                            { $$ = new Ge($3, $4); }
                      | "(" LT term term ")"                                            { $$ = new Lt($3, $4); }
                      | "(" LE term term ")"                                            { $$ = new Le($3, $4); }
                      | "(" CONCAT term_list_ ")"                                       { $$ = new Concat($3); }
                      | "(" IN term term ")"                                            { $$ = new In($3, $4); }
                      | "(" NOTIN term term ")"                                         { $$ = new NotIn($3, $4); }
                      | "(" LEN term ")"                                                { $$ = new Len($3); }
                      | "(" CONTAINS term term ")"                                      { $$ = new Contains($3, $4); }
                      | "(" NOTCONTAINS term term ")"                                   { $$ = new NotContains($3, $4); }
                      | "(" PREFIXOF term term ")"                                      { $$ = new Begins($4, $3); }
                      | "(" SUFFIXOF term term ")"                                      { $$ = new Ends($4, $3); }
                      | "(" BEGINS term term ")"                                        { $$ = new Begins($3, $4); }
                      | "(" NOTBEGINS term term ")"                                     { $$ = new NotBegins($3, $4); }
                      | "(" ENDS term term ")"                                          { $$ = new Ends($3, $4); }
                      | "(" NOTENDS term term ")"                                       { $$ = new NotEnds($3, $4); }
                      | "(" INDEXOF term term ")"                                       { $$ = new IndexOf($3, $4); }
                      | "(" INDEXOF term term term ")"                                  { $$ = new IndexOf($3, $4, $5); }
                      | "(" LASTINDEXOF term term ")"                                   { $$ = new LastIndexOf($3, $4); }
                      | "(" LASTINDEXOF term term term ")"                              { $$ = new LastIndexOf($3, $4, $5); } 
                      | "(" CHARAT term term ")"                                        { $$ = new CharAt($3, $4); }
                      | "(" SUBSTRING term term ")"                                     { $$ = new SubString($3, $4); }
                      | "(" SUBSTRING term term term ")"                                { $$ = new SubString($3, $4, $5); }
                      | "(" SUBSTRINGLENGTH term term term ")"                          { $$ = new SubString($3, $4, $5, SubString::Mode::LASTINDEXLENGTH); }
                      | "(" TOUPPER term ")"                                            { $$ = new ToUpper($3); }
                      | "(" TOLOWER term ")"                                            { $$ = new ToLower($3); }
                      | "(" TRIM term term ")"                                          { $$ = new Trim($3); }
                      | "(" TOSTRING term ")"                                           { $$ = new ToString($3); }
                      | "(" TOINT term ")"                                              { $$ = new ToInt($3); }
                      | "(" REPLACE term term term ")"                                  { $$ = new Replace($3, $4, $5); }
                      | "(" COUNT term term ")"                                         { $$ = new Count($3, $4); }
                  /*    | "(" ITE term term term ")"                                      { $$ = TransformIteToOr($3, $4, $5); } */
                      | "(" ITE term term term ")"                                      { $$ = new Ite($3, $4, $5); }                      
                      | "(" RE_CONCAT term_list_ ")"                                    { $$ = new ReConcat($3); }
                      | "(" RE_OR term_list_ ")"                                        { $$ = new Or($3); }
                      | "(" RE_UNION term_list_ ")"                                     { $$ = new ReUnion($3); }
                      | "(" RE_INTER term_list_ ")"                                     { $$ = new ReInter($3); }
                      | "(" RE_STAR term ")"                                            { $$ = new ReStar($3); }
                      | "(" RE_PLUS term ")"                                            { $$ = new RePlus($3); }
                      | "(" RE_OPT term ")"                                             { $$ = new ReOpt($3); }
                      | "(" RE_RANGE term term ")"                                      { $$ = ReRangeToRegex($3, $4);}
                      | "(" "(" "_" RE_LOOP term ")" term ")"                                { $$ = new ReLoop($7, $5);}
                      | "(" "(" "_" RE_LOOP term term ")" term ")"                           { $$ = new ReLoop($8, $5, $6);}
                      | "(" RE_LOOP term term ")"                                       { $$ = new ReLoop($3, $4);}
                      | "(" RE_LOOP term term term ")"                                  { $$ = new ReLoop($3, $4, $5);}
                      | "(" TO_REGEX term ")"                                           { $$ = new ToRegex($3); }
                      | "(" qual_identifier term_list_ ")"                              { $$ = new UnknownTerm($2, $3); }
                      | qual_identifier                                                 { $$ = $1; }
                      | term_constant                                                   { $$ = $1; }
                      ;

sorted_var_list       :
                        sorted_var_list_                                                { $$ = $1; }
                      | /* empty */                                                     { $$ = new SortedVarList(); }
                      ;

sorted_var_list_      :
                        sorted_var_list_ sorted_var                                     { $1 -> push_back($2); $$ = $1; }
                      | sorted_var                                                      { $$ = new SortedVarList(); $$ -> push_back($1); }
                      ;

sorted_var            :
                        "(" SYMBOL sort ")"                                             { $$ = new SortedVar(new Primitive($2, Primitive::Type::SYMBOL), $3); }
                      ;

var_binding_list_     :
                        var_binding_list_ var_binding                                   { $1 -> push_back($2); $$ = $1; }
                      | var_binding                                                     { $$ = new VarBindingList(); $$ -> push_back($1); }
                      ;

var_binding           :
                        "(" SYMBOL  term ")"                                            { $$ = new VarBinding(new Primitive($2, Primitive::Type::SYMBOL), $3); }
                      ;
                      
qual_identifier       :
                        "(" "as" identifier sort ")"                                    { $$ = new AsQualIdentifier($3, $4); }
                      | identifier                                                      { $$ = new QualIdentifier($1); }
                      ;

term_constant         :
                        spec_constant                                                   { $$ = new TermConstant($1); }  
                      ;

/* Attributes */
attribute_list_       :
                        attribute_list_ attribute                                       { $1->push_back($2); $$ = $1; }  
                      | attribute                                                       { $$ = new AttributeList(); $$->push_back($1); }
                      ;

attribute             :
                        KEYWORD attribute_value                                         { $$ = new Attribute(); }
                      | KEYWORD                                                         { $$ = new Attribute(); }
                      ;

attribute_value       :
                        "(" s_expr_list ")"
                      | SYMBOL              { std::cout << $1 << std::endl; }
                      | spec_constant
                      ; 

/* Sorts */

sort_list             :
                        sort_list_                                                      { $$ = $1; }
                      | /* empty */                                                     { $$ = nullptr; }
                      ;
                      
sort_list_            :
                        sort_list_ sort                                                 { $1->push_back($2); $$ = $1; }
                      | sort                                                            { $$ = new SortList(); $$->push_back($1); }
                      ; 

sort                  :
                        "(" identifier sort_list_ ")"                                   { $$ = new Sort($2, $3); }
                      | identifier                                                      { $$ = new Sort($1); }
                      | t_variable                                                      { $$ = new Sort($1); } 
                      ;

t_variable              :
                        TBOOL                                                           { $$ = new TBool(); }
                      | TINT                                                            { $$ = new TInt(); }
                      | TSTRING                                                         { $$ = new TString(); }
                      | TREGEXP                                                         { $$ = new TRegExp(); }
                      ;

/* Identifiers */
identifier            :
                        "(" "_" SYMBOL numeral_list_ ")"                                { $$ = new Identifier(new Primitive("_", Primitive::Type::SYMBOL), new Primitive($3, Primitive::Type::SYMBOL), $4); }
                      | SYMBOL                                                          { $$ = new Identifier(new Primitive($1, Primitive::Type::SYMBOL)); } 
                      ;

numeral_list_         :
                        numeral_list_ NUMERAL                                           { $1 -> push_back(new Primitive($2, Primitive::Type::SYMBOL)); $$ = $1; }
                      | NUMERAL                                                         { $$ = new NumeralList(); $$ -> push_back(new Primitive($1, Primitive::Type::SYMBOL)); }
                      ;

/* S-expressions */
s_expr_list           : 
                        s_expr_list_        {  }
                      | /* empty */         {  }
                      ;

s_expr_list_          : 
                        s_expr_list_ s_expr {  }
                      | s_expr              {  }
                      ;

s_expr                :
                        "(" s_expr_list ")" {  }
                      | KEYWORD             {  }
                      | SYMBOL              {  }
                      | spec_constant       {  }
                      ;

spec_constant         :
                        BOOL                { $$ = new Primitive($1, Primitive::Type::BOOL); }
                      | BINARY              { $$ = new Primitive($1, Primitive::Type::BINARY); }
                      | HEXADECIMAL         { $$ = new Primitive($1, Primitive::Type::HEXADECIMAL); }
                      | NUMERAL             { $$ = new Primitive($1, Primitive::Type::NUMERAL); }
                      | DECIMAL             { $$ = new Primitive($1, Primitive::Type::DECIMAL); }
                      | STRING              { $$ = new Primitive($1, Primitive::Type::STRING); }
                      | REGEX               { $$ = new Primitive($1, Primitive::Type::REGEX); }
                      | RE_ALLCHAR          { $$ = new Primitive(".", Primitive::Type::REGEX); }
                      | RE_ALL              { $$ = new Primitive(".*", Primitive::Type::REGEX); }
                      ;




%%

void Vlab::SMT::Parser::error (const location_type& l, const std::string& m)
{
  std::cerr << l << ": " << m << std::endl;
}
